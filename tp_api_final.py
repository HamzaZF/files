# -*- coding: utf-8 -*-
"""tp_api_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I6VDFKSqZhYxuB6-KTeB4yNLJClHMspE
"""

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import CountVectorizer

print("# Specify the file paths")
file_path_labels = "/content/drive/MyDrive/TP_API/labels.txt"
file_path_api_calls = "/content/drive/MyDrive/TP_API/all_analysis_data.txt"

print("# Read the text files using pandas")
labels = pd.read_csv(file_path_labels, delimiter='\t', header=None, skip_blank_lines=True)  # Adjust the delimiter if necessary
calls = pd.read_csv(file_path_api_calls, delimiter='\t', header=None, skip_blank_lines=True)  # Adjust the delimiter if necessary

calls_np = calls.values
labels_np = labels.values

types = np.array(["Spyware", "Downloader", "Trojan", "Worms", "Adware", "Dropper", "Virus", "Backdoor"])

counter = 0
groups = [[] for _ in range(8)]

for call in calls_np:
    index = np.where(types == labels_np[counter])[0][0]
    groups[index].append(call)
    counter = counter + 1

print("# Spyware learning")
Spyware_calls = groups[0]
Spyware_calls_splitted = []

for e in Spyware_calls:
    Spyware_calls_splitted.append(str(e).split())

print("# Downloader learning")
Downloader_calls = groups[1]
Downloader_calls_splitted = []

for e in Downloader_calls:
    Downloader_calls_splitted.append(str(e).split())

print("# Trojan learning")
Trojan_calls = groups[2]
Trojan_calls_splitted = []

for e in Trojan_calls:
    Trojan_calls_splitted.append(str(e).split())

print("# Worms learning")
Worms_calls = groups[3]
Worms_calls_splitted = []

for e in Worms_calls:
    Worms_calls_splitted.append(str(e).split())

print("# Adware learning")
Adware_calls = groups[4]
Adware_calls_splitted = []

for e in Adware_calls:
    Adware_calls_splitted.append(str(e).split())

print("# Dropper learning")
Dropper_calls = groups[5]
Dropper_calls_splitted = []

for e in Dropper_calls:
    Dropper_calls_splitted.append(str(e).split())

print("# Virus learning")
Virus_calls = groups[6]
Virus_calls_splitted = []

for e in Virus_calls:
    Virus_calls_splitted.append(str(e).split())

print("# Backdoor learning")
Backdoor_calls = groups[7]
Backdoor_calls_splitted = []

for e in Virus_calls:
    Backdoor_calls_splitted.append(str(e).split())

print(len(Spyware_calls_splitted))
print(len(Downloader_calls_splitted))
print(len(Trojan_calls_splitted))
print(len(Worms_calls_splitted))
print(len(Adware_calls_splitted))
print(len(Dropper_calls_splitted))
print(len(Virus_calls_splitted))
print(len(Backdoor_calls_splitted))

#min_size = 832
min_size = min(len(Spyware_calls_splitted), len(Downloader_calls_splitted), len(Trojan_calls_splitted), len(Worms_calls_splitted), len(Adware_calls_splitted), len(Dropper_calls_splitted), len(Virus_calls_splitted), len(Backdoor_calls_splitted))

Spyware_calls_splitted = Spyware_calls_splitted[0:min_size]
Downloader_calls_splitted = Downloader_calls_splitted[0:min_size]
Trojan_calls_splitted = Trojan_calls_splitted[0:min_size]
Worms_calls_splitted = Worms_calls_splitted[0:min_size]
Adware_calls_splitted = Adware_calls_splitted[0:min_size]
Dropper_calls_splitted = Dropper_calls_splitted[0:min_size]
Virus_calls_splitted = Virus_calls_splitted[0:min_size]
Backdoor_calls_splitted = Backdoor_calls_splitted[0:min_size]

print("# Spyware")
Spyware_calls = Spyware_calls_splitted

# Étiquettes pour les données (0 pour les appels de Spyware)
labels_Spyware = np.zeros(len(Spyware_calls))

# Concatenate the words in each call into a single string
Spyware_calls_concatenated = [' '.join(call) for call in Spyware_calls]

print("# Downloader")
Downloader_calls = Downloader_calls_splitted

# Étiquettes pour les données (1 pour les appels de Downloader)
labels_Downloader = np.ones(len(Downloader_calls))

# Concatenate the words in each call into a single string
Downloader_calls_concatenated = [' '.join(call) for call in Downloader_calls]

print("# Trojan")
Trojan_calls = Trojan_calls_splitted

# Étiquettes pour les données (2 pour les appels de Downloader)
labels_Trojan = np.full(len(Trojan_calls), 2)

# Concatenate the words in each call into a single string
Trojan_calls_concatenated = [' '.join(call) for call in Downloader_calls]

print("# Worms")
Worms_calls = Worms_calls_splitted

# Étiquettes pour les données (3 pour les appels de Worms)
labels_Worms = np.full(len(Worms_calls), 3)

# Concatenate the words in each call into a single string
Worms_calls_concatenated = [' '.join(call) for call in Worms_calls]

print("# Adware")
Adware_calls = Adware_calls_splitted

# Étiquettes pour les données (4 pour les appels de Adware)
labels_Adware = np.full(len(Adware_calls), 4)

# Concatenate the words in each call into a single string
Adware_calls_concatenated = [' '.join(call) for call in Adware_calls]

print("# Dropper")
Dropper_calls = Dropper_calls_splitted

# Étiquettes pour les données (5 pour les appels de Dropper)
labels_Dropper = np.full(len(Dropper_calls), 5)

# Concatenate the words in each call into a single string
Dropper_calls_concatenated = [' '.join(call) for call in Dropper_calls]

print("# Virus")
Virus_calls = Virus_calls_splitted

# Étiquettes pour les données (6 pour les appels de Virus)
labels_Virus = np.full(len(Virus_calls), 6)

# Concatenate the words in each call into a single string
Virus_calls_concatenated = [' '.join(call) for call in Virus_calls]

print("# Backdoor")
Backdoor_calls = Backdoor_calls_splitted

# Étiquettes pour les données (7 pour les appels de Backdoor)
labels_Backdoor = np.full(len(Backdoor_calls), 7)

# Concatenate the words in each call into a single string
Backdoor_calls_concatenated = [' '.join(call) for call in Backdoor_calls]

all_calls = Spyware_calls_concatenated + Downloader_calls_concatenated + Trojan_calls_concatenated + Worms_calls_concatenated + Adware_calls_concatenated + Dropper_calls_concatenated + Virus_calls_concatenated + Backdoor_calls_concatenated  
all_labels = np.concatenate((labels_Spyware, labels_Downloader, labels_Trojan, labels_Worms, labels_Adware, labels_Dropper, labels_Virus, labels_Backdoor))

vectorizer = CountVectorizer()
all_calls_encoded = vectorizer.fit_transform(all_calls)

print(len(Downloader_calls_concatenated))
print(len(labels_Downloader))

print(len(Spyware_calls_concatenated))
print(len(labels_Spyware))

X_train, X_test, y_train, y_test = train_test_split(all_calls_encoded, all_labels, test_size=0.2, random_state=42)

model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

api_call = Spyware_calls_concatenated[78:79]

api_call_encoded = vectorizer.transform(api_call)
predicted_label = model.predict(api_call_encoded)

print("Predicted label:", predicted_label)